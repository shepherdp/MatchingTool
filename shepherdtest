import random
import itertools
import tkinter as tk
from tkinter import font
import networkx as nx
import matplotlib.pyplot as plt
import math


class Student:
    def __init__(self, name, rating=3):
        self.name = name
        self.rating = rating

    def __str__(self):
        return self.name

    def __repr__(self):
        return self.name


class Graph:
    def __init__(self):
        self.vertices = {}

    def add_vertex(self, vertex):
        if vertex not in self.vertices:
            self.vertices[vertex] = {}

    def add_edge(self, v1, v2, weight):
        self.add_vertex(v1)
        self.add_vertex(v2)
        self.vertices[v1][v2] = weight
        self.vertices[v2][v1] = weight

    def get_edge_weight(self, v1, v2):
        if v1 in self.vertices and v2 in self.vertices[v1]:
            return self.vertices[v1][v2]
        else:
            return float('inf')

    def delete_vertex(self, vertex):
        if vertex in self.vertices:
            for v in self.vertices[vertex]:
                del self.vertices[v][vertex]
            del self.vertices[vertex]

    def measure_group_weight(self, group):
        total_weight = 0
        for v1, v2 in itertools.combinations(group, 2):
            total_weight += self.get_edge_weight(v1, v2)
        return total_weight

    def draw_graph(self):
        # Create an empty graph
        G = nx.Graph()
        # Clear the graph window
        plt.clf()
        # Add edges with pair counts as edge attributes
        for v1 in self.vertices:
            for v2 in self.vertices:
                if v1 != v2:
                    edge = self.get_edge_weight(v1, v2)
                    G.add_edge(v1.name, v2.name, weight=edge)
        print('Networkx graph')
        for e in G.edges:
            print(e[0], e[1], G[e[0]][e[1]]['weight'])
        print('_____')

        # Extract edge weights
        weights = [G[u][v]['weight'] for u, v in G.edges()]

        # Normalize the edge weights
        normalized_weights = [(weight - min(weights)) / (max(weights) - min(weights) + 0.001) for weight in weights]

        # Define a colormap based on the pair counts
        cmap = plt.cm.get_cmap('YlGnBu')
        cmap = plt.cm.get_cmap('cool')

        # Draw the graph
        pos = nx.spring_layout(G)
        nx.draw_networkx_nodes(G, pos, node_color='lightgray', node_size=200)

        # These weren't showing up because there was a width of 0
        nx.draw_networkx_edges(G, pos, edge_color='lightblue', width=[i+1 for i in weights]) #, edge_cmap=cmap)

        # Add labels to the nodes
        nx.draw_networkx_labels(G, pos)

        # Show the graph
        plt.axis('off')
        plt.show()

    def swap_students(self, groups):
        for g in groups:
            random.shuffle(g)
        random.shuffle(groups)
        group_weights = [self.measure_group_weight(group) for group in groups]

        for i, group1 in enumerate(groups[:-1]):
            weight1 = group_weights[i]
            for j, group2 in enumerate(groups[i + 1:], start=i + 1):
                weight2 = group_weights[j]

                for pair in itertools.product(range(len(group1)), range(len(group2))):
                    k, l = pair

                    if k == l:
                        continue

                    # Perform the swap
                    group1[k], group2[l] = group2[l], group1[k]

                    # Calculate the weight differences
                    delta1 = self.measure_group_weight(group1) - weight1
                    delta2 = self.measure_group_weight(group2) - weight2

                    # Compare the weight differences
                    if delta1 + delta2 <= 0:
                        # Swap back if the rating is not improved
                        group2[l], group1[k] = group1[k], group2[l]
                    else:
                        # Update the group weights and running totals
                        weight1 += delta1
                        weight2 += delta2
                        group_weights[i] += delta1
                        group_weights[j] += delta2

    def get_lowest_weight_group(self, previous_pairs, group_size=2):
        group_size = int(group_size)
        min_weight_grouping = []

        dead_vertices = set()
        ranked_vertices = list(self.vertices.keys())

        random.shuffle(ranked_vertices)
        for p in range(len(ranked_vertices)):
            v1 = ranked_vertices[p]
            if v1 in dead_vertices:
                continue

            lowest_weight_connections = []
            for v2 in (set(self.vertices) - dead_vertices):
                edge_weight = self.get_edge_weight(v1, v2)
                if len(lowest_weight_connections) < group_size + 1 or edge_weight < \
                        lowest_weight_connections[group_size][1]:
                    lowest_weight_connections.append((v2, edge_weight))
                    lowest_weight_connections.sort(key=lambda x: x[1])

            group = []
            if (len(self.vertices) - len(dead_vertices)) % group_size != 0:
                actual_group_size = group_size + 1
            else:
                actual_group_size = group_size

            for v2, _ in lowest_weight_connections[:actual_group_size - 1]:
                dead_vertices.add(v2)
                group.append(v2)

                # # Update previous pairs
                # need_new_pairing = True
                # for pp in previous_pairs:
                #     if v1 in pp and v2 in pp:
                #         pp[2] += 1
                #         need_new_pairing = False
                # if need_new_pairing:
                #     previous_pairs.append([v1, v2, 1])

            group.append(v1)
            dead_vertices.add(v1)

            min_weight_grouping.append(group)
        return min_weight_grouping


def update_previous_pairs(grouping, previous_pairs):
    ##    print("before")
    for p in previous_pairs:
        print(p[0].name + " " + p[1].name + " " + str(p[2]))
    for group in grouping:
        for v1 in group:
            for v2 in group:
                if v1 != v2:
                    found = False
                    for p in previous_pairs:
                        if v1 in p[:2] and v2 in p[:2]:
                            p[2] += 1
                            found = True
                            break
                    if found == False:
                        previous_pairs.append([v1, v2, 1])
    ##    print("after")
    # for p in previous_pairs:
    #     print(p[0].name + " " + p[1].name + " " + str(p[2]))
    return previous_pairs


def make_groups_with_equal_teammates(graph, students, previous_pairs, emphasis_on_new_teams, group_size):
    group_size = int(group_size)

    # Add each student as a node to the graph
    for student in students:
        graph.add_vertex(student)

    # Get to overall average rating
    average_rating = sum(student.rating for student in students) / len(students)

    # Assign weights to edges between students
    for i in range(len(students)):
        for j in range(i + 1, len(students)):
            student1 = students[i]
            student2 = students[j]

            # Calculate the edge weight based on ratings
            edge_weight = abs((student1.rating + student2.rating) / 2 - average_rating)

            # Check the number of occurrences in previous pairings and increase the edge weight
            pair_count = 0
            is_forbidden = False
            for p in previous_pairs:
                if (student1 in p and student2 in p):
                    pair_count = p[2]  # data should look like this: (student1, student2, pair_count)
                    if pair_count == -1:
                        is_forbidden = True
            edge_weight += pair_count * emphasis_on_new_teams

            # Add weighted edge to the graph
            if pair_count != -1:
                graph.add_edge(student1, student2, edge_weight)

    # Find min weight matching
    matching = graph.get_lowest_weight_group(previous_pairs, group_size)
    for i in range(3):
        graph.swap_students(matching)
    return matching


def make_balanced_groups(graph, students, previous_pairs, emphasis_on_new_teams, group_size):
    group_size = int(group_size)

    for student in students:
        graph.add_vertex(student)

    # Calculate the length of students list
    num_students = len(students)

    # Get the overall average rating
    average_rating = sum(student.rating for student in students) / num_students

    # Convert previous_pairs to a set of tuples for pair count calculation
    previous_pairs_set = set((p[0], p[1]) for p in previous_pairs)

    # Assign weights to edges between students
    for i in range(num_students):
        student1 = students[i]
        for j in range(i + 1, num_students):
            student2 = students[j]

            # Calculate the edge weight based on ratings
            edge_weight = abs(student1.rating - student2.rating)

            # Check the number of occurrences in previous pairings and increase the edge weight
            pair_count = sum(1 for p in previous_pairs_set if student1 in p and student2 in p)
            is_forbidden = any(p[2] == -1 for p in previous_pairs if student1 in p and student2 in p)
            edge_weight += pair_count * emphasis_on_new_teams

            # Add weighted edge to the graph
            if not is_forbidden:
                graph.add_edge(student1, student2, edge_weight)

    # Find min weight matching
    matching = graph.get_lowest_weight_group(previous_pairs, group_size)
    for i in range(3):
        graph.swap_students(matching)
    return matching


def make_random_groups(graph, students, previous_pairs, emphasis_on_new_teams, group_size):
    group_size = int(group_size)

    for student in students:
        graph.add_vertex(student)

    # Calculate the length of students list
    num_students = len(students)

    # Convert previous_pairs to a set of tuples for pair count calculation
    previous_pairs_set = set((p[0], p[1]) for p in previous_pairs)

    for i in range(len(previous_pairs)):
        if previous_pairs[i][0].name > previous_pairs[i][1].name:
            temp = previous_pairs[i][0]
            previous_pairs[i][0] = previous_pairs[i][1]
            previous_pairs[i][1] = temp

    print('Previous pair before: ')
    for pair in previous_pairs:
        print_pair(pair)

    # Silas, I'm restructuring just a little bit here.
    # I'll comment each thing I add.

    # This is just a dictionary structured as follows:
    # matches = {student1: [(partner1, num1), (partner2, num2), ...],
    #            student2: [(partner1, num1), (partner2, num2), ...],
    #            ...}
    matches = {}
    for i in range(num_students):
        matches[students[i].name] = []
    for p in previous_pairs:
        matches[p[0].name].append([p[1].name, p[2]])

    # Assign weights to edges between students
    for i in range(num_students):
        student1 = students[i]
        for j in range(i + 1, num_students):
            student2 = students[j]
            edge_weight = 0
            pair_count = 0

            # Here is the replacement for the for loop that would check
            # previous_pairs:
            matches1 = matches[student1.name]
            for match in matches1:
                if match[0] == student2.name:
                    pair_count = match[1]
                    break

            ##            for p in previous_pairs:
            ##                if student1 in p and student2 in p:
            ##                    pair_count = p[2]
            # Check the number of occurrences in previous pairings and increase the edge weight
            # If I'm not mistaken, edge_weight will always be 0 at this point
            # because we don't ever change it after creating it
            ##            is_forbidden = (edge_weight < 0)

            # I'm checking pair_count for the -1 instead
            is_forbidden = (pair_count < 0)
            edge_weight += pair_count * emphasis_on_new_teams

            # Add weighted edge to the graph
            if not is_forbidden:
                graph.add_edge(student1, student2, edge_weight)

    # This is happening after we create the graph
    # print(graph.vertices)
    graph.draw_graph()

    # Find min weight matching
    matching = graph.get_lowest_weight_group(previous_pairs, group_size)
    for i in range(3):
        graph.swap_students(matching)

    previous_pairs = update_previous_pairs(matching, previous_pairs)
    print('Previous pair after: ')
    for pair in previous_pairs:
        print_pair(pair)
    print()
    return matching


def print_pair(pair):
    print(f'{pair[0].name} {pair[1].name} {pair[2]}')


def make_groups_with_leaders(graph, students, previous_pairs, emphasis_on_new_teams, group_size):
    group_size = int(group_size)

    # Put leaders in a group
    leader_count = len(students) // group_size
    leaders = students[:leader_count]

    # Add each student as a node to the graph
    for student in students:
        graph.add_vertex(student)

    # Assign weights to edges between students
    pair_counts = {}
    forbidden_pairs = set()
    for i in range(len(students)):
        student1 = students[i]
        for j in range(i + 1, len(students)):
            student2 = students[j]
            # Calculate the length of students list
            num_students = len(students)

            # Get the overall average rating
            average_rating = sum(student.rating for student in students) / num_students
            edge_weight = average_rating

            # Calculate the edge weight based on ratings
            if student1 in leaders and student2 in leaders:
                edge_weight += 5

            # Check the number of occurrences in previous pairings and increase the edge weight
            if (student1, student2) in pair_counts:
                pair_count = pair_counts[(student1, student2)]
                if pair_count == -1:
                    forbidden_pairs.add((student1, student2))
                edge_weight += pair_count * emphasis_on_new_teams

            # Add weighted edge to the graph
            if (student1, student2) not in forbidden_pairs:
                graph.add_edge(student1, student2, edge_weight)

    # Find min weight matching
    matching = graph.get_lowest_weight_group(previous_pairs, group_size)
    # swap students to make better groups
    for i in range(3):
        graph.swap_students(matching)

    return matching


def make_students(how_many_students):
    students = []
    for i in range(how_many_students):
        students.append(Student("student" + str(i), random.randint(1, 5)))
    return students


def draw_previous_pairs_graph(previous_pairs):
    # Create an empty graph
    G = nx.Graph()

    # Add edges with pair counts as edge attributes
    for edge in previous_pairs:
        student1, student2, pair_count = edge
        G.add_edge(student1.name, student2.name, weight=pair_count)
    print(G.edges())

    # Extract edge weights
    weights = [G[u][v]['weight'] for u, v in G.edges()]

    # Normalize the edge weights
    normalized_weights = [(weight - min(weights)) / (max(weights) - min(weights) + 0.2) for weight in weights]

    # Define a colormap based on the pair counts
    ##    cmap = plt.cm.get_cmap('YlGnBu')
    cmap = plt.cm.get_cmap('cool')

    # Draw the graph
    pos = nx.spring_layout(G)
    nx.draw_networkx_nodes(G, pos, node_color='lightgray', node_size=200)
    nx.draw_networkx_edges(G, pos, width=weights, edge_color='lightblue', edge_cmap=cmap)

    # Add labels to the nodes
    nx.draw_networkx_labels(G, pos)

    # Draw the edges with the normalized weights
    nx.draw_networkx_edges(G, pos, width=normalized_weights, edge_color='lightblue', edge_cmap=cmap)

    # Show the graph
    plt.axis('off')
    plt.show()


def main():
    students = [
        Student("Daniel", 1),
        Student("Baniel", 1),
        Student("Shaniel", 2),
        Student("Maniel", 2),
        Student("Sydney", 3),
        Student("Bidney", 4)
        # ...
    ]

    students = make_students(4)

    previous_pairs = [
        # ...
    ]

    emphasis_on_new_teams = 11

    global group_size
    group_size = 2
    graph = Graph()

    choice = 'y'
    graph = Graph()

    while choice.lower() == 'y':
        # get initial grouping
        # iter = 0
        # flag = False
        # while flag == False:
        #     for p in previous_pairs:
        #         if p[2] >1:
        #             flag = True
        paired_students = make_random_groups(graph, students, previous_pairs, emphasis_on_new_teams, group_size)
        #     iter += 1
        # print(str(iter)+" times before fail")
        # draw_previous_pairs_graph(previous_pairs)
        # draw_previous_pairs_graph(previous_pairs)
        # for p in previous_pairs:
        # print(p[0].name + " " + p[1].name + "   "+ str(p[2]))

        # GET STANDARD DEVIATION
        # std_dev = 0
        # total_sum = 0
        #
        # for group in paired_students:
        #     for student in group:
        #         total_sum += student.rating
        #
        # total_avg = total_sum / len(students)
        #
        # sum_squared_diff = 0
        # for group in paired_students:
        #     for student in group:
        #         diff = student.rating - total_avg
        #         sum_squared_diff += diff ** 2
        #
        # variance = sum_squared_diff / len(students)
        #
        # std_deviation = math.sqrt(variance)
        #
        # for group in paired_students:
        #     for prev in previous_pairs:
        #         for stud1 in group:
        #             for stud2 in group:
        #                 if stud1 in prev and stud2 in prev and prev[2] > 1:
        #                     print("iterations: "+str(iterations-1))
        #                     return
        #     #get standard deviation
        #     group_sum = 0
        #     for student in group:
        #         group_sum += student.rating
        #     group_avg = group_sum/len(group)
        #     std_dev += abs(total_avg-group_avg)
        #     print("\n ")
        #     group_str = ""
        #     for student in group:
        #         group_str += student.name+", "
        #     print("["+group_str + "]")
        # print("The std dev is: "+ str(std_deviation))
        # # Ask the user if they want to generate another pairing
        choice = input("\n\n\nGenerate another pairing? (y/n): \n")


if __name__ == "__main__":
    main()
